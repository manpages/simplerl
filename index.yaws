<erl>
% TODO: Add page compiler
% TODO: RSS for blog
% TODO: Re-write category.php using sed instead of php

%%%% BEGIN CONFIG %%%%
	% chroot:
	root(A) ->
		A#arg.docroot. %++ "/newRoot".

	% html appending order (queue/stack):
	%% either Current ++ New or vice-versa
	glue(NewHTML, CurrentHTML) ->
		NewHTML ++ CurrentHTML.

	% how notes are wrapped:
	note(start) ->
	"
	<div class=\"note\">
	<div class=\"noteText\">

	";
	note(finish) ->
	"
	</div>
	</div>
	".
%%%%% END CONFIG %%%%%

% source code:
% get the list of all .note files
find_notes(Path) ->
    case file:list_dir(Path) of
		{ok, Files} ->
			find_notes(
				lists:map(
					fun(X) -> Path ++ X end,
					lists:sort(Files)
				),
				fun(X) -> note(start) ++ readlines(X) ++ note(finish) end, 
				[]
			);
		{error, _} -> false
	end.
find_notes([], F, HTML) -> HTML;
find_notes([H|T], F, HTML) ->
	NHTML = case (string:rstr(H, "note") > 0) of
		true  -> 
			glue(F(H), HTML);
		false -> 
			HTML
	end,
	find_notes(T, F, NHTML)
.

% yeah, recursion and list re-building. fucked up for huge files
readlines(FileName) ->
    {ok, Device} = file:open(FileName, [read]),
    try get_all_lines(Device)
      after file:close(Device)
    end.
get_all_lines(Device) ->
    case io:get_line(Device, "") of
        eof  -> [];
        Line -> Line ++ get_all_lines(Device)
    end.


% here's your stuff :)
out(A) ->
	% change that to chroot in a category
	Root = root(A),

	% getting header and footer
	Header = readlines(Root ++ "/header.html"),
	Footer = readlines(Root ++ "/footer.html"),

	% getting notes, building body
	Dir = string:substr(A#arg.fullpath, 1, 
		string:rchr(A#arg.fullpath, $/)
	),
	Body = find_notes(Dir),

	% giving out content
	{html, Header ++ Body ++ Footer}.
</erl>
